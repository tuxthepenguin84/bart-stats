#! /bin/bash

# Requirements: curl, tidy, figlet

clear

# Debug Flag
#set -xv

# Variables
URL="http://api.bart.gov/api/"
KEY="MW9S-E7SL-26DU-VV8V"
ADVISORIES="bsa.aspx?cmd=bsa&key="
ELEVATORS="bsa.aspx?cmd=elev&key="
TRAINS="bsa.aspx?cmd=count&key="
ORIG="etd.aspx?cmd=etd&orig=$2&key="
STNS="stn.aspx?cmd=stns&key="
FARE="sched.aspx?cmd=fare&orig=$2&dest=$3&key="
START=$2
END=$3
STARTVAL=0
ENDVAL=0

# Title
figlet "BART  Stats"
echo ---------------------------------------------------
date
echo

# Station Validation
if [ ! -z $2 ]; then
  STNSLIST=$(curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${STNS}${KEY} | tidy -xml -quiet)
  for (( SELECT=1; SELECT<=$(echo "$STNSLIST" | grep abbr -c); SELECT++ ))
    do
      STNSABBR=$(echo "$STNSLIST" | grep abbr | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
      if [ ${2,,} = ${STNSABBR,,} ]; then
        STARTVAL=1
      fi
    done
  if [ ! -z $3 ]; then
    for (( SELECT=1; SELECT<=$(echo "$STNSLIST" | grep abbr -c); SELECT++ ))
      do
        STNSABBR=$(echo "$STNSLIST" | grep abbr | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
        if [ ${3,,} = ${STNSABBR,,} ]; then
          ENDVAL=1
        fi
      done
    if [ "$ENDVAL" == "0" ]; then
      echo "Looks like you misspelled your 2nd station ID, please run the following to get a list of BART station IDs: ./bart-status stationlist"
      exit
    fi
  fi
  if [ "$STARTVAL" == "0" ]; then
    echo "Looks like you misspelled your 1st station ID, please run the following to get a list of BART station IDs: ./bart-status stationlist"
    exit
  fi
fi
echo

# Functions
# Usage
Fusage(){

  echo "BART Stats Usage:"
  echo
  echo -e "\e[4mstationid\e[24m - Shows Realtime Station Information w/ Estimated Time of Departure, requires starting station and optional end station."
  echo "Usage: ./bart-stats stationid startstation"
  echo "Example: ./bart-stats stationid rich"
  echo "Usage: ./bart-stats stationid startstation endstation"
  echo "Example: ./bart-stats stationid rich sfia"
  echo "Additional Notes: When specifying an end station, the fare will automatically be calculated and shown."
  echo
  echo -e "\e[4mfare\e[24m - Shows the fare between two stations. Requires starting station and end station."
  echo "Usage: /bart-stats fare startstation endstation"
  echo "Example: ./bart-stats fare rich sfia"
  echo
  echo -e "\e[4mstationlist\e[24m - Shows a list of all stations with station ID."
  echo "Usage: ./bart-stats stationlist"
  echo "Example: ./bart-stats stationlist"
  echo
}

# Advisories Information
Fadvisories(){
echo -e "\e[4mAdvisory Information\e[24m"
echo -n "Advisories: "
curl --silent ${URL}${ADVISORIES}${KEY} | grep description | cut -d"[" -f3 | cut -d"]" -f1
echo -n "Elevator Information: "
curl --silent ${URL}${ELEVATORS}${KEY} | grep description | cut -d"[" -f3 | cut -d"]" -f1
echo -n "Trains in Service: "
curl --silent ${URL}${TRAINS}${KEY} | grep traincount | cut -d">" -f2 | cut -d"<" -f1
echo
}

# Realtime Station Information
Fstation(){
echo -e "\e[4mRealtime Information\e[24m"
echo -n "Estimated Time of Departure From Station: "
ETD=$(curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${ORIG}${KEY} | tidy -xml -quiet)
echo "$ETD" | grep name | cut -d">" -f2 | cut -d"<" -f1
printf "%31s Line | Departing In (minutes)\n"
for (( SELECT=1; SELECT<=$(echo "$ETD" | grep destination -c); SELECT++ ))
  do
    LINE=$(echo "$ETD" | grep destination | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
    TIME1=$(echo "$ETD" | grep destination -A 3 | grep minutes | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
    TIME2=$(echo "$ETD" | grep destination -A 12 | grep minutes | sed -n "$((SELECT*2))"p | cut -d">" -f2 | cut -d"<" -f1)
    TIME3=$(echo "$ETD" | grep destination -A 21 | grep minutes | sed -n "$((SELECT*3))"p | cut -d">" -f2 | cut -d"<" -f1)
    if [ "$TIME3" = "Leaving" ]; then
      TIME3=0
    fi
    if [ -z "$TIME3" ] || [ "$TIME3" -le "$TIME2" ]; then
      TIME3=$""
    fi
    if [ -z "$TIME2" ] || [ "$TIME2" = "Leaving" ]; then
      TIME2=$""
    fi
    printf "$LINE %"$((35-${#LINE}))"s | $TIME1 %"$((7-${#TIME1}))"s $TIME2 %"$((7-${#TIME2}))"s $TIME3\n"
  done
echo
}

# Fare Cost
Ffare(){
if [ -z "$START" ] || [ -z "$END" ]; then
Fusage
else
echo -e "\e[4mFare\e[24m"
echo -n "From Station: "
curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${STNS}${KEY} | tidy -xml -quiet | grep -i -B 1 $START | grep name | cut -d">" -f2 | cut -d"<" -f1
echo -n "To Station:   "
curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${STNS}${KEY} | tidy -xml -quiet | grep -i -B 1 $END | grep name | cut -d">" -f2 | cut -d"<" -f1
echo -n "$"
curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${FARE}${KEY} | tidy -xml -quiet | grep "<fare>" | cut -d">" -f2 | cut -d"<" -f1
fi
if [ "$START" == "$END" ]; then
  echo "You've selected an excursion route.  You will have 3 hours to enter and exit the same station."
  exit
fi
echo
}

# List Stations
Fstationlist(){
STNSLIST=$(curl --silent -H "Accept: application/xml" -H "Content-Type: application/xml" -X GET ${URL}${STNS}${KEY} | tidy -xml -quiet)
  for (( SELECT=1; SELECT<=$(echo "$STNSLIST" | grep name -c); SELECT++ ))
    do
      STNSNAME=$(echo "$STNSLIST" | grep name | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
      STNSABBR=$(echo "$STNSLIST" | grep abbr | sed -n "$SELECT"p | cut -d">" -f2 | cut -d"<" -f1)
      printf "$STNSABBR $STNSNAME\n"
    done
echo
}

if [ -z "$1" ]; then
  Fusage
  exit
fi

case $1 in
  "station")
    if [ -z "$START" ]; then # If no starting station given, run Usage function
      Fusage
      else
      Fadvisories
      Fstation
      if [ ! -z "$END" ]; then # if end station is not null, run Fare Cost function
        Ffare
      fi
    fi
    ;;
  "fare")
    Ffare
    ;;
  "stationlist")
    Fstationlist
    ;;
  *)
  Fusage
  exit
  ;;
esac
